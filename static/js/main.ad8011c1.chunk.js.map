{"version":3,"sources":["components/header/Header.js","components/body/Departures.js","components/body/Arrivals.js","components/body/TableHeader.js","components/body/Schedule.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","Departures","props","dep","map","flight","Date","timeDepShedule","getDate","date","slice","key","ID","term","gateNo","status","undefined","airline","en","logoSmallName","name","concat","fltNo","Arrivals","arr","timeArrShedule","TableHeader","tab","onClick","getDepart","getArrival","day","changeDate","body_Departures","body_Arrivals","Schedule","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loaded","load","bind","assertThisInitialized","_this2","fetch","then","res","json","setState","num","arguments","length","setDate","year","getFullYear","month","getMonth","toString","padStart","body_TableHeader","body","arrival","departure","Component","App","Fragment","header_Header","body_Schedule","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad8011c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className='header'>\r\n        <img className='logo' src=\"https://iev.aero/_nuxt/img/logo@2x.2d2c20b.png\" alt=\"logo\" />\r\n      <div className='header_nav'>\r\n        <nav className='navBar'>\r\n          <li>For Passengers</li>\r\n          <li>IEVServices</li>\r\n          <li>VIP</li>\r\n          <li>Corporate</li>\r\n          <li>Language</li>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React  from 'react';\r\nimport './Departures.css';\r\n\r\nfunction Departures(props) {\r\n return  props.dep.map(flight => {\r\n    if (new Date(flight.timeDepShedule).getDate() === +props.date.slice(0,2)){\r\n\r\n      return (\r\n          <tr key={flight.ID} className='row'>\r\n            <td>{flight.term}</td>\r\n            <td>{flight.gateNo}</td>\r\n            <td>{flight.timeDepShedule.slice(11,16)}</td>\r\n            <td>{flight['airportToID.name_en']}</td>\r\n            <td>{flight.status}</td>\r\n            {flight.airline === undefined\r\n              ? <td>no data found</td>\r\n              : <td className='airline'>\r\n                  <img className='airlineLogo' src={flight.airline.en.logoSmallName} alt='logo'/>\r\n                  <p>{flight.airline.en.name}</p>\r\n                </td>\r\n            }\r\n            {flight['carrierID.IATA'] === undefined\r\n              ? <td>no data found</td>\r\n              : <td>{`${flight['carrierID.IATA']}${flight.fltNo}`}</td>\r\n            }\r\n          </tr>\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nexport default Departures;\r\n","import React from 'react';\r\n\r\nfunction Arrivals(props) {\r\n  return props.arr.map(flight => {\r\n    if (new Date(flight.timeArrShedule).getDate() === +props.date.slice(0,2)){\r\n      return (\r\n        <tr key={flight.ID} className='row'>\r\n          <td>{flight.term}</td>\r\n          <td>{flight.timeArrShedule.slice(11,16)}</td>\r\n          <td>{flight['airportFromID.name_en']}</td>\r\n          <td>{flight.status}</td>\r\n          {flight.airline === undefined\r\n            ? <td>no data found</td>\r\n            : <td className='airline'>\r\n                <img className='airlineLogo' src={flight.airline.en.logoSmallName} alt='logo'/>\r\n                <p>{flight.airline.en.name}</p>\r\n              </td>\r\n          }\r\n          {flight['carrierID.IATA'] === undefined\r\n            ? <td>no data found</td>\r\n            : <td>{`${flight['carrierID.IATA']}${flight.fltNo}`}</td>\r\n          }\r\n        </tr>\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nexport default Arrivals;\r\n","import React from 'react';\r\nimport Departures from \"./Departures\";\r\nimport './TableHeader.css';\r\nimport Arrivals from \"./Arrivals\";\r\n\r\nfunction TableHeader(props) {\r\n  return (\r\n    <div className='schedule'>\r\n      <div className='dep-arr'>\r\n        <div className={props.tab === 'departures' ? 'active' : 'notActive'}\r\n             onClick={props.getDepart}>\r\n          DEPARTURES\r\n        </div>\r\n        <div className={props.tab === 'departures' ? 'notActive' : 'active'}\r\n             onClick={props.getArrival}>\r\n          ARRIVALS\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className='day'>\r\n          <span className={props.day === 'yesterday' ? 'activeDay' : ''}\r\n                onClick={() => props.changeDate(-1)}>\r\n            YESTERDAY\r\n          </span>\r\n          <span className={props.day === 'today' ? 'activeDay' : ''}\r\n                onClick={() => props.changeDate(0)}>\r\n            TODAY\r\n          </span>\r\n          <span className={props.day === 'tomorrov' ? 'activeDay' : ''}\r\n                onClick={() => props.changeDate(1)}>\r\n            TOMORROW\r\n          </span>\r\n        </div>\r\n        <table className='table'>\r\n          <thead>\r\n            <tr className='table-title'>\r\n              <th>Terminal</th>\r\n              {props.tab === 'departures'\r\n                ? <th>Gate</th>\r\n                : null\r\n              }\r\n              <th>Local time</th>\r\n              <th>Destination</th>\r\n              <th>Status</th>\r\n              <th>Airline</th>\r\n              <th>Flight</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {props.tab === 'departures'\r\n            ? <Departures dep={props.dep} date={props.date}/>\r\n            : <Arrivals arr={props.arr} date={props.date}/>\r\n          }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, {Component} from 'react';\r\nimport TableHeader from \"./TableHeader\";\r\n\r\nclass Schedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: null,\r\n      loaded: false,\r\n      tab: 'departures',\r\n      date: this.getDate(),\r\n      day: 'today'\r\n    };\r\n\r\n    this.load = this.load.bind(this);\r\n    this.getDate = this.getDate.bind(this);\r\n    this.getDepart = this.getDepart.bind(this);\r\n    this.getArrival = this.getArrival.bind(this);\r\n    this.changeDate = this.changeDate.bind(this);\r\n  }\r\n\r\n  load() {\r\n    return fetch(`https://api.iev.aero/api/flights/${this.state.date}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.setState({\r\n          data: res,\r\n          loaded: true\r\n        });\r\n      });\r\n  }\r\n\r\n  getDate(num = 0) {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + num);\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate().toString().padStart(2, '0');\r\n    return `${day}-${month}-${year}`;\r\n  };\r\n\r\n  changeDate(num) {\r\n    this.setState({\r\n      date: this.getDate(num),\r\n      day: (num === 0) ? 'today' : (num === 1) ? 'tomorrov' : 'yesterday'\r\n    });\r\n  }\r\n\r\n  getDepart() {\r\n    this.setState({\r\n      tab: 'departures'\r\n    });\r\n  }\r\n\r\n  getArrival() {\r\n    this.setState({\r\n      tab: 'arrivals'\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDate();\r\n    this.load();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loaded) {\r\n      return (\r\n        <div className='table'>\r\n          <TableHeader arr={this.state.data.body.arrival} dep={this.state.data.body.departure}\r\n                       getDepart={this.getDepart} getArrival={this.getArrival} getDate={this.getDate}\r\n                       date={this.state.date} tab={this.state.tab} changeDate={this.changeDate}\r\n                       day={this.state.day}/>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <p className='loading'>loading...</p>\r\n    }\r\n  }\r\n}\r\n\r\nexport default Schedule;\r\n","import React from 'react';\nimport Header from \"./components/header/Header\";\nimport Schedule from \"./components/body/Schedule\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Schedule />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}